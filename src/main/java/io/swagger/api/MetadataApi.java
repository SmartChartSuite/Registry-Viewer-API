/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Metadata;
import io.swagger.model.Metadatas;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-22T13:54:56.277Z[GMT]")
@Validated
public interface MetadataApi {

    @Operation(summary = "Getting Registry Information", description = "Obtaining information about the availabe registries.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of Registries", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Metadata.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter") })
    @RequestMapping(value = "/metadata",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Metadatas> getMetadata();

    @Operation(summary = "Adding Registry Information", description = "Adding new registry information.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "New registry information added"),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter") })
    @RequestMapping(value = "/metadata",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addMetadata(@NotNull @Parameter(in = ParameterIn.QUERY, description = "add a new registry information", schema=@Schema()) @Valid @RequestBody Metadata body);

    @Operation(summary = "Editing Registry Information", description = "Editing registry information.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The registry information edited"),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter") })
    @RequestMapping(value = "/metadata",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> editMetadata(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "tag", required = true) String tag, @Parameter(in = ParameterIn.DEFAULT, description = "edit registry information", schema=@Schema()) @Valid @RequestBody Metadata body);

}

